#!/usr/bin/env python

"""
  voice_nav.py allows controlling a mobile base using simple speech commands.
  Based on the voice_cmd_vel.py script by Michael Ferguson in the pocketsphinx ROS package.
"""

import roslib; roslib.load_manifest('pi_speech_tutorial')
import rospy

import actionlib
import tf
import move_base_msgs.msg
from move_base_msgs.msg import MoveBaseAction
from geometry_msgs.msg import Pose
from geometry_msgs.msg import PoseArray

from geometry_msgs.msg import Twist
from std_msgs.msg import String
from math import copysign

class voice_cmd_vel:
    def __init__(self):
        rospy.on_shutdown(self.cleanup)
        #self.max_speed = rospy.get_param("~max_speed", 0.4)
        #self.max_angular_speed = rospy.get_param("~max_angular_speed", 1.5)
        self.speed = 3.0
        #self.angular_speed = rospy.get_param("~start_angular_speed", 0.5)
        
        #self.rate = rospy.get_param("~rate", 5)
	self.rate = 5.0
        r = rospy.Rate(self.rate)
        self.paused = False
	
        # Initialize the Twist message we will publish.
        goal = move_base_msgs.msg.MoveBaseGoal
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.header.frame_id = "/base_link"
	goal.target_pose.pose.position.x = 0.0	
	goal.target_pose.pose.position.y = 0.0
	goal.target_pose.pose.position.z = 0.0
	self.goal.target_pose.pose.orientation = tf.createQuaternionMsgFromYaw(0)

        # Publish the Twist message to the cmd_vel topic
        #self.cmd_vel_pub = rospy.Publisher('cmd_vel', Twist)
        
        # Subscribe to the /recognizer/output topic to receive voice commands.
        rospy.Subscriber('/recognizer/output', String, self.speechCb)
        client = actionlib.SimpleActionClient('move_base', true)
        # A mapping from keywords to commands.
        self.keywords_to_command = {'stop': ['stop'],
                                    'forward': ['forward'],
                                    'backward': ['backward'],
                                    'turn left': ['turn left'],
                                    'turn right': ['turn right'],
        
        rospy.loginfo("Ready to receive voice commands")
        
        # We have to keep publishing the cmd_vel message if we want the robot to keep moving.
        while not rospy.is_shutdown():
            #self.cmd_vel_pub.publish(self.msg)
		client.send_goal(goal)
		client.wait_for_result()
            #r.sleep()                       
            
    def get_command(self, data):
        for (command, keywords) in self.keywords_to_command.iteritems():
            for word in keywords:
                if data.find(word) > -1:
                    return command
        
    def speechCb(self, msg):        
        command = self.get_command(msg.data)
        
        rospy.loginfo("Command: " + str(command))
        
        if command == 'forward':    
            self.goal.target_pose.position.x = self.speed
            
        elif command == 'turn left':
            self.goal.target_pose.pose.orientation = tf.createQuaternionMsgFromYaw(1.5708)
                
        elif command == 'turn right':    
            self.goal.target_pose.pose.orientation = tf.createQuaternionMsgFromYaw(-1.5708)
                
        elif command == 'backward':
        	self.goal.target_pose.position.x = -self.speed
            
        elif command == 'stop': 
            # Stop the robot!  Publish a Twist message consisting of all zeros.         
            #self.msg = Twist()
       
        else:
		rospy.loginfo("Command not recognized")
            return

        #self.msg.linear.x = min(self.max_speed, max(-self.max_speed, self.msg.linear.x))
        #self.msg.angular.z = min(self.max_angular_speed, max(-self.max_angular_speed, self.msg.angular.z))
	client.send_goal(goal)

    def cleanup(self):
        # When shutting down be sure to stop the robot!  Publish a Twist message consisting of all zeros.
        #twist = Twist()
        #self.cmd_vel_pub.publish(twist)
	temp = move_base_msgs.msg.MoveBaseGoal
	client.send_goal(temp)
	client.wait_for_result()

if __name__=="__main__":
    rospy.init_node('voice_nav')
    try:
        voice_cmd_vel()
    except:
        pass

